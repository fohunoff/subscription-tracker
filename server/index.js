import express from 'express';
import cors from 'cors';
import { OAuth2Client } from 'google-auth-library';
import jwt from 'jsonwebtoken';
import { config } from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import mongoose from 'mongoose';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ __dirname –¥–ª—è ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config({ path: join(__dirname, '.env') });

const app = express();
const client = new OAuth2Client(process.env.GOOGLE_CLIENT_ID);

// =====================
// –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö MONGODB
// =====================

const connectDB = async () => {
  try {
    const conn = await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/subscription-tracker', {
      // –ù–æ–≤—ã–µ –æ–ø—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è Mongoose 6+
    });
    console.log(`‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞: ${conn.connection.host}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error.message);
    console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ MongoDB –∑–∞–ø—É—â–µ–Ω–∞ –∏ MONGODB_URI –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    process.exit(1);
  }
};

// =====================
// MONGOOSE –ú–û–î–ï–õ–ò
// =====================

// –ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userSchema = new mongoose.Schema({
  googleId: {
    type: String,
    required: true,
    unique: true,
    index: true
  },
  email: {
    type: String,
    required: true,
    unique: true,
    lowercase: true
  },
  name: {
    type: String,
    required: true
  },
  avatar: String,
  provider: {
    type: String,
    enum: ['google'],
    default: 'google'
  },
  isEmailVerified: {
    type: Boolean,
    default: true
  },
  lastLogin: {
    type: Date,
    default: Date.now
  }
}, {
  timestamps: true
});

const User = mongoose.model('User', userSchema);

// –ú–æ–¥–µ–ª—å –ø–æ–¥–ø–∏—Å–∫–∏
const subscriptionSchema = new mongoose.Schema({
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true,
    index: true
  },
  name: {
    type: String,
    required: true,
    trim: true
  },
  cost: {
    type: Number,
    required: true,
    min: 0
  },
  currency: {
    type: String,
    required: true,
    enum: ['RUB', 'USD', 'EUR', 'RSD'],
    default: 'RUB'
  },
  cycle: {
    type: String,
    required: true,
    enum: ['monthly', 'annually'],
    default: 'monthly'
  },
  paymentDay: {
    type: Number,
    required: true,
    min: 1,
    max: 31
  },
  fullPaymentDate: {
    type: Date
  }
}, {
  timestamps: true
});

// –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
subscriptionSchema.index({ userId: 1, createdAt: -1 });

const Subscription = mongoose.model('Subscription', subscriptionSchema);

// =====================
// MIDDLEWARE
// =====================

app.use(cors({
  origin: process.env.FRONTEND_URL || 'http://localhost:5173',
  credentials: true
}));
app.use(express.json({ limit: '10mb' }));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ development —Ä–µ–∂–∏–º–µ
if (process.env.NODE_ENV === 'development') {
  app.use((req, res, next) => {
    console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
    next();
  });
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
const authenticateToken = async (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader?.split(' ')[1];

  if (!token) {
    return res.status(401).json({ message: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
  }

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'fallback-secret-key');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    const user = await User.findOne({ googleId: decoded.userId });
    if (!user) {
      return res.status(401).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    req.user = decoded;
    req.userDoc = user;
    next();
  } catch (error) {
    if (error.name === 'TokenExpiredError') {
      return res.status(401).json({ message: '–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫' });
    }
    return res.status(403).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' });
  }
};

// =====================
// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
// =====================

const generateToken = (user) => {
  return jwt.sign(
    { 
      userId: user.googleId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º googleId –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π ID
      email: user.email,
      name: user.name
    },
    process.env.JWT_SECRET || 'fallback-secret-key',
    { expiresIn: '7d' }
  );
};

const validateSubscriptionData = (data) => {
  const { name, cost, currency, cycle, paymentDay } = data;
  
  if (!name?.trim()) {
    throw new Error('–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
  }
  
  if (!cost || isNaN(parseFloat(cost)) || parseFloat(cost) <= 0) {
    throw new Error('–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
  }
  
  if (!currency || !['RUB', 'USD', 'EUR', 'RSD'].includes(currency)) {
    throw new Error('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –≤–∞–ª—é—Ç–∞');
  }
  
  if (!cycle || !['monthly', 'annually'].includes(cycle)) {
    throw new Error('–¶–∏–∫–ª –æ–ø–ª–∞—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å monthly –∏–ª–∏ annually');
  }
  
  if (!paymentDay || isNaN(parseInt(paymentDay))) {
    throw new Error('–î–µ–Ω—å –æ–ø–ª–∞—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
  }
  
  return true;
};

// =====================
// –ú–ê–†–®–†–£–¢–´ –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò
// =====================

// Google OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
app.post('/api/auth/google', async (req, res) => {
  try {
    const { token } = req.body;

    if (!token) {
      return res.status(400).json({ message: '–¢–æ–∫–µ–Ω Google –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }

    // –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º Google —Ç–æ–∫–µ–Ω
    const ticket = await client.verifyIdToken({
      idToken: token,
      audience: process.env.GOOGLE_CLIENT_ID,
    });

    const payload = ticket.getPayload();
    const { 
      sub: googleId, 
      email, 
      name, 
      picture,
      email_verified 
    } = payload;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email
    if (!email_verified) {
      return res.status(400).json({
        message: 'Email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –≤ Google –∞–∫–∫–∞—É–Ω—Ç–µ'
      });
    }

    // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    let user = await User.findOne({ googleId });
    
    if (!user) {
      user = await User.create({
        googleId,
        email,
        name,
        avatar: picture,
        provider: 'google',
        isEmailVerified: true,
        lastLogin: new Date()
      });
      
      console.log(`–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${email}`);
    } else {
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      user.lastLogin = new Date();
      user.avatar = picture;
      user.name = name;
      await user.save();
    }

    // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    const authToken = generateToken(user);

    res.json({
      success: true,
      token: authToken,
      user: {
        id: user.googleId,
        name: user.name,
        email: user.email,
        avatar: user.avatar,
        provider: user.provider,
        createdAt: user.createdAt
      }
    });

  } catch (error) {
    console.error('Google OAuth –æ—à–∏–±–∫–∞:', error);
    
    if (error.message?.includes('Token used too early')) {
      return res.status(400).json({
        message: '–¢–æ–∫–µ–Ω Google –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.'
      });
    }
    
    res.status(401).json({
      success: false,
      message: '–ù–µ–≤–µ—Ä–Ω—ã–π Google —Ç–æ–∫–µ–Ω'
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/auth/me', authenticateToken, (req, res) => {
  const user = req.userDoc;
  
  res.json({
    user: {
      id: user.googleId,
      name: user.name,
      email: user.email,
      avatar: user.avatar,
      provider: user.provider,
      createdAt: user.createdAt,
      lastLogin: user.lastLogin
    }
  });
});

// –í—ã—Ö–æ–¥
app.post('/api/auth/logout', authenticateToken, (req, res) => {
  res.json({ 
    success: true,
    message: '–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ' 
  });
});

// =====================
// –ú–ê–†–®–†–£–¢–´ –ü–û–î–ü–ò–°–û–ö
// =====================

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/subscriptions', authenticateToken, async (req, res) => {
  try {
    const subscriptions = await Subscription.find({ 
      userId: req.userDoc._id 
    }).sort({ createdAt: -1 });

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const formattedSubs = subscriptions.map(sub => ({
      id: sub._id.toString(),
      name: sub.name,
      cost: sub.cost,
      currency: sub.currency,
      cycle: sub.cycle,
      paymentDay: sub.paymentDay,
      fullPaymentDate: sub.fullPaymentDate,
      createdAt: sub.createdAt,
      updatedAt: sub.updatedAt
    }));

    res.json({
      success: true,
      subscriptions: formattedSubs
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
app.post('/api/subscriptions', authenticateToken, async (req, res) => {
  try {
    const { name, cost, currency, cycle, paymentDay, fullPaymentDate } = req.body;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    validateSubscriptionData(req.body);

    const newSubscription = await Subscription.create({
      userId: req.userDoc._id,
      name: name.trim(),
      cost: parseFloat(cost),
      currency,
      cycle,
      paymentDay: parseInt(paymentDay),
      fullPaymentDate
    });

    res.status(201).json({
      success: true,
      subscription: {
        id: newSubscription._id.toString(),
        name: newSubscription.name,
        cost: newSubscription.cost,
        currency: newSubscription.currency,
        cycle: newSubscription.cycle,
        paymentDay: newSubscription.paymentDay,
        fullPaymentDate: newSubscription.fullPaymentDate,
        createdAt: newSubscription.createdAt,
        updatedAt: newSubscription.updatedAt
      },
      message: '–ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ'
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    res.status(400).json({ message: error.message });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
app.put('/api/subscriptions/:id', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;
    const { name, cost, currency, cycle, paymentDay, fullPaymentDate } = req.body;
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const subscription = await Subscription.findOne({ 
      _id: id, 
      userId: req.userDoc._id 
    });
    
    if (!subscription) {
      return res.status(404).json({ message: '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updateData = {};
    if (name !== undefined) {
      if (!name.trim()) throw new Error('–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      updateData.name = name.trim();
    }
    if (cost !== undefined) {
      const parsedCost = parseFloat(cost);
      if (isNaN(parsedCost) || parsedCost <= 0) {
        throw new Error('–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
      }
      updateData.cost = parsedCost;
    }
    if (currency !== undefined) {
      if (!['RUB', 'USD', 'EUR', 'RSD'].includes(currency)) {
        throw new Error('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –≤–∞–ª—é—Ç–∞');
      }
      updateData.currency = currency;
    }
    if (cycle !== undefined) {
      if (!['monthly', 'annually'].includes(cycle)) {
        throw new Error('–¶–∏–∫–ª –æ–ø–ª–∞—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å monthly –∏–ª–∏ annually');
      }
      updateData.cycle = cycle;
    }
    if (paymentDay !== undefined) {
      const parsedDay = parseInt(paymentDay);
      if (isNaN(parsedDay)) {
        throw new Error('–î–µ–Ω—å –æ–ø–ª–∞—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º');
      }
      updateData.paymentDay = parsedDay;
    }
    if (fullPaymentDate !== undefined) {
      updateData.fullPaymentDate = fullPaymentDate;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    const updatedSubscription = await Subscription.findByIdAndUpdate(
      id,
      updateData,
      { new: true, runValidators: true }
    );

    res.json({
      success: true,
      subscription: {
        id: updatedSubscription._id.toString(),
        name: updatedSubscription.name,
        cost: updatedSubscription.cost,
        currency: updatedSubscription.currency,
        cycle: updatedSubscription.cycle,
        paymentDay: updatedSubscription.paymentDay,
        fullPaymentDate: updatedSubscription.fullPaymentDate,
        createdAt: updatedSubscription.createdAt,
        updatedAt: updatedSubscription.updatedAt
      },
      message: '–ü–æ–¥–ø–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ'
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    res.status(400).json({ message: error.message });
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
app.delete('/api/subscriptions/:id', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;
    
    const deletedSubscription = await Subscription.findOneAndDelete({ 
      _id: id, 
      userId: req.userDoc._id 
    });
    
    if (!deletedSubscription) {
      return res.status(404).json({ message: '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    res.json({
      success: true,
      message: `–ü–æ–¥–ø–∏—Å–∫–∞ "${deletedSubscription.name}" —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ò–º–ø–æ—Ä—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –∏–∑ JSON
app.post('/api/subscriptions/import', authenticateToken, async (req, res) => {
  try {
    const { subscriptions: importedSubs } = req.body;
    
    if (!Array.isArray(importedSubs)) {
      return res.status(400).json({ 
        message: '–î–∞–Ω–Ω—ã–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º' 
      });
    }

    let addedCount = 0;
    const errors = [];

    for (const [index, sub] of importedSubs.entries()) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        const exists = await Subscription.findOne({
          userId: req.userDoc._id,
          name: sub.name,
          cost: sub.cost,
          paymentDay: sub.payment_day || sub.paymentDay
        });

        if (!exists && sub.name && sub.cost) {
          // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
          const normalizedSub = {
            userId: req.userDoc._id,
            name: sub.name.trim(),
            cost: parseFloat(sub.cost),
            currency: sub.currency || 'RUB',
            cycle: sub.cycle || 'monthly',
            paymentDay: parseInt(sub.payment_day || sub.paymentDay),
            fullPaymentDate: sub.next_payment_date || sub.fullPaymentDate || null
          };

          // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
          validateSubscriptionData(normalizedSub);
          
          await Subscription.create(normalizedSub);
          addedCount++;
        }
      } catch (error) {
        errors.push(`–ü–æ–¥–ø–∏—Å–∫–∞ ${index + 1}: ${error.message}`);
      }
    }

    const response = {
      success: true,
      message: `–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${addedCount} –ø–æ–¥–ø–∏—Å–æ–∫`,
      addedCount
    };

    if (errors.length > 0) {
      response.errors = errors;
      response.message += `. –û—à–∏–±–∫–∏: ${errors.length}`;
    }

    res.json(response);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø–æ–¥–ø–∏—Å–æ–∫:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// =====================
// –£–¢–ò–õ–ò–¢–´ –ò –°–¢–ê–¢–ò–°–¢–ò–ö–ê
// =====================

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/stats', authenticateToken, async (req, res) => {
  try {
    const subscriptions = await Subscription.find({ userId: req.userDoc._id });
    
    const stats = {
      totalSubscriptions: subscriptions.length,
      totalMonthlyCost: subscriptions.reduce((total, sub) => {
        const monthlyCost = sub.cycle === 'annually' ? sub.cost / 12 : sub.cost;
        return total + monthlyCost;
      }, 0),
      totalAnnualCost: subscriptions.reduce((total, sub) => {
        const annualCost = sub.cycle === 'monthly' ? sub.cost * 12 : sub.cost;
        return total + annualCost;
      }, 0),
      byCurrency: subscriptions.reduce((acc, sub) => {
        acc[sub.currency] = (acc[sub.currency] || 0) + 1;
        return acc;
      }, {}),
      byCycle: subscriptions.reduce((acc, sub) => {
        acc[sub.cycle] = (acc[sub.cycle] || 0) + 1;
        return acc;
      }, {}),
      averageCost: subscriptions.length > 0 ? 
        subscriptions.reduce((total, sub) => {
          const monthlyCost = sub.cycle === 'annually' ? sub.cost / 12 : sub.cost;
          return total + monthlyCost;
        }, 0) / subscriptions.length : 0
    };

    res.json({
      success: true,
      stats
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/health', async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    const dbStatus = mongoose.connection.readyState === 1 ? 'connected' : 'disconnected';
    const usersCount = await User.countDocuments();
    const subscriptionsCount = await Subscription.countDocuments();

    res.json({
      status: 'OK',
      timestamp: new Date().toISOString(),
      uptime: Math.floor(process.uptime()),
      memory: {
        used: Math.round(process.memoryUsage().heapUsed / 1024 / 1024),
        total: Math.round(process.memoryUsage().heapTotal / 1024 / 1024)
      },
      database: {
        status: dbStatus,
        users: usersCount,
        subscriptions: subscriptionsCount
      },
      version: process.env.npm_package_version || '1.0.0',
      node: process.version
    });
  } catch (error) {
    res.status(500).json({
      status: 'ERROR',
      message: error.message
    });
  }
});

// =====================
// –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö
// =====================

// 404 –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.use('*', (req, res) => {
  res.status(404).json({ 
    message: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
    path: req.originalUrl,
    method: req.method
  });
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
app.use((error, req, res, next) => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  res.status(500).json({ 
    message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
    ...(process.env.NODE_ENV === 'development' && { error: error.message, stack: error.stack })
  });
});

// =====================
// –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê
// =====================

const startServer = async () => {
  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
    await connectDB();
    
    const PORT = process.env.PORT || 5000;
    
    const server = app.listen(PORT, () => {
      console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      console.log(`üìä Health check: http://localhost:${PORT}/api/health`);
      console.log(`üîó Frontend URL: ${process.env.FRONTEND_URL || 'http://localhost:5173'}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
      const requiredEnvVars = ['GOOGLE_CLIENT_ID'];
      const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);
      
      if (missingVars.length > 0) {
        console.warn('‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:', missingVars.join(', '));
        console.warn('üí° –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏');
      } else {
        console.log('‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
      }

      if (!process.env.JWT_SECRET) {
        console.warn('‚ö†Ô∏è  JWT_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback –∫–ª—é—á');
      }
    });

    // Graceful shutdown
    const gracefulShutdown = async (signal) => {
      console.log(`\n${signal} –ø–æ–ª—É—á–µ–Ω, –∑–∞–≤–µ—Ä—à–∞—é —Å–µ—Ä–≤–µ—Ä...`);
      
      server.close(async (err) => {
        if (err) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞:', err);
          process.exit(1);
        }
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        await mongoose.connection.close();
        console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –∑–∞–∫—Ä—ã—Ç–æ');
        console.log('–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        process.exit(0);
      });
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        console.error('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞');
        process.exit(1);
      }, 10000);
    };

    process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
    process.on('SIGINT', () => gracefulShutdown('SIGINT'));

  } catch (error) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä:', error.message);
    process.exit(1);
  }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', promise, 'reason:', reason);
});

process.on('uncaughtException', (error) => {
  console.error('Uncaught Exception:', error);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
startServer();

export default app;